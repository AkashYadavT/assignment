/**
 * @typedef {import('./Validator.js').Validator} Validator
 * @typedef {import('lit').TemplateResult} TemplateResult
 * @typedef {import('../../types/validate/ValidateMixinTypes.js').FeedbackMessage} FeedbackMessage
 */
/**
 * @desc Takes care of accessible rendering of error messages
 * Should be used in conjunction with FormControl having ValidateMixin applied
 */
export class LionValidationFeedback extends LitElement {
    static get properties(): {
        feedbackData: {
            attribute: boolean;
        };
    };
    /**
     * @overridable
     * @param {Object} opts
     * @param {string | Node | TemplateResult } opts.message message or feedback node or TemplateResult
     * @param {string} [opts.type]
     * @param {Validator} [opts.validator]
     * @protected
     */
    protected _messageTemplate({ message }: {
        message: string | Node | TemplateResult;
        type?: string | undefined;
        validator?: import("./Validator.js").Validator | undefined;
    }): string | Node | TemplateResult;
    currentType: string | undefined;
    removeMessage: number | undefined;
    /** @type {FeedbackMessage[]} */
    feedbackData: import("../../types/validate/ValidateMixinTypes.js").FeedbackMessage[] | undefined;
    render(): import("lit-html").TemplateResult<1>;
}
export type Validator = import('./Validator.js').Validator;
export type TemplateResult = import('lit').TemplateResult;
export type FeedbackMessage = import('../../types/validate/ValidateMixinTypes.js').FeedbackMessage;
import { LitElement } from "lit";
//# sourceMappingURL=LionValidationFeedback.d.ts.map