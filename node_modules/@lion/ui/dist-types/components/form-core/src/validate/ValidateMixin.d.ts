/**
 * Handles all validation, based on modelValue changes. It has no knowledge about dom and
 * UI. All error visibility, dom interaction and accessibility are handled in FeedbackMixin.
 *
 * @type {ValidateMixin}
 * @param {import('@open-wc/dedupe-mixin').Constructor<import('lit').LitElement>} superclass
 */
export const ValidateMixinImplementation: ValidateMixin;
export type ValidateMixin = import('../../types/validate/ValidateMixinTypes.js').ValidateMixin;
export const ValidateMixin: typeof import("../../types/validate/ValidateMixinTypes.js").ValidateImplementation;
export type ValidationType = import('../../types/validate/ValidateMixinTypes.js').ValidationType;
export type ValidateHost = import('../../types/validate/ValidateMixinTypes.js').ValidateHost;
export type ValidatorOutcome = import('../../types/validate/index.js').ValidatorOutcome;
export type ValidateHostConstructor = typeof import('../../types/validate/ValidateMixinTypes.js').ValidateHost;
export type ValidationResultEntry = {
    validator: Validator;
    outcome: boolean | string;
};
export type ValidationStates = {
    [type: string]: {
        [validatorName: string]: string | boolean;
    };
};
import { Validator } from "./Validator.js";
//# sourceMappingURL=ValidateMixin.d.ts.map