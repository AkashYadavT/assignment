declare const LionSwitch_base: typeof LionField & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/choice-group/ChoiceInputMixinTypes.js").ChoiceInputHost> & Pick<typeof import("../../form-core/types/choice-group/ChoiceInputMixinTypes.js").ChoiceInputHost, "prototype" | "styles"> & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/FormatMixinTypes.js").FormatHost> & Pick<typeof import("../../form-core/types/FormatMixinTypes.js").FormatHost, "prototype"> & Pick<typeof import("lit").LitElement, "prototype" | "_$litElement$" | "enabledWarnings" | "enableWarning" | "disableWarning" | "addInitializer" | "_initializers" | "elementProperties" | "properties" | "elementStyles" | "styles" | "observedAttributes" | "createProperty" | "getPropertyOptions" | "shadowRootOptions"> & import("@open-wc/dedupe-mixin").Constructor<import("@open-wc/scoped-elements/types.js").ScopedElementsHost>;
export class LionSwitch extends LionSwitch_base {
    static get styles(): (import("lit").CSSResultOrNative | import("lit").CSSResultArray)[];
    static get scopedElements(): {
        'lion-switch-button': typeof LionSwitchButton;
    };
    /**
     * Input node here is the lion-switch-button, which is not compatible with LionField _inputNode --> HTMLInputElement
     * Therefore we do a full override and typecast to an intersection type that includes LionSwitchButton
     * @type {LionSwitchButton}
     * @protected
     */
    protected get _inputNode(): LionSwitchButton;
    get slots(): {
        input: () => HTMLElement;
    };
    /**
     * Restore original render function from FormControlMixin.js
     * As it gets overwritten in ChoiceInputMixin
     */
    render(): import("lit-html").TemplateResult<1>;
    /** @protected */
    protected _groupOneTemplate(): import("lit-html").TemplateResult<1>;
    /** @protected */
    protected _groupTwoTemplate(): import("lit-html").TemplateResult<1>;
    /**
     * @private
     * @param {Event} ev
     */
    private __handleButtonSwitchCheckedChanged;
    /** @param {import('lit').PropertyValues } changedProperties */
    updated(changedProperties: import('lit').PropertyValues): void;
    /**
     * Override this function from ChoiceInputMixin.
     * @protected
     */
    protected _isEmpty(): boolean;
    /** @protected */
    protected _syncButtonSwitch(): void;
    /**
     * @configure FormControlMixin
     * @protected
     */
    protected _onLabelClick(): void;
}
import { LionField } from "../../../exports/form-core.js";
import { LionSwitchButton } from "./LionSwitchButton.js";
export {};
//# sourceMappingURL=LionSwitch.d.ts.map