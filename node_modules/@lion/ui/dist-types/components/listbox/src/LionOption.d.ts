declare const LionOption_base: typeof LitElement & import("@open-wc/dedupe-mixin").Constructor<import("../../core/types/SlotMixinTypes.js").SlotHost> & Pick<typeof import("../../core/types/SlotMixinTypes.js").SlotHost, "prototype"> & Pick<typeof LitElement, "prototype" | "_$litElement$" | "enabledWarnings" | "enableWarning" | "disableWarning" | "addInitializer" | "_initializers" | "elementProperties" | "properties" | "elementStyles" | "styles" | "observedAttributes" | "createProperty" | "getPropertyOptions" | "shadowRootOptions"> & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/registration/FormRegisteringMixinTypes.js").FormRegisteringHost> & Pick<typeof import("../../form-core/types/registration/FormRegisteringMixinTypes.js").FormRegisteringHost, "prototype"> & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/choice-group/ChoiceInputMixinTypes.js").ChoiceInputHost> & Pick<typeof import("../../form-core/types/choice-group/ChoiceInputMixinTypes.js").ChoiceInputHost, "prototype" | "styles"> & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/FormatMixinTypes.js").FormatHost> & Pick<typeof import("../../form-core/types/FormatMixinTypes.js").FormatHost, "prototype"> & import("@open-wc/dedupe-mixin").Constructor<import("../../core/types/DisabledMixinTypes.js").DisabledHost> & Pick<typeof import("../../core/types/DisabledMixinTypes.js").DisabledHost, "prototype">;
/**
 * @typedef {import('lit').TemplateResult } TemplateResult
 * @typedef {import('../../form-core/types/choice-group/ChoiceGroupMixinTypes.js').ChoiceGroupHost } ChoiceGroupHost
 * @typedef {import('../types/LionOption.js').LionOptionHost } LionOptionHost
 */
/**
 * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option
 * Can be a child of datalist/select, or role="listbox"
 *
 * Element gets state supplied externally, reflects this to attributes,
 * enabling SubClassers to style based on those states
 */
export class LionOption extends LionOption_base {
    /** @type {any} */
    static get properties(): any;
    static get styles(): import("lit").CSSResult[];
    /**
     * @override We want to start with a clean slate, so we omit slots inherited from FormControl
     */
    override get slots(): {};
    active: boolean;
    /** @private */
    private __onClick;
    /**
     * @param {string} [name]
     * @param {unknown} [oldValue]
     * @param {import('lit').PropertyDeclaration} [options]
     * @returns {void}
     */
    requestUpdate(name?: string | undefined, oldValue?: unknown, options?: import("lit").PropertyDeclaration<any, any> | undefined): void;
    /**
     *
     * @returns {TemplateResult}
     */
    render(): TemplateResult;
    connectedCallback(): void;
    /** @private */
    private __registerEventListeners;
    /** @private */
    private __unRegisterEventListeners;
}
export type TemplateResult = import('lit').TemplateResult;
export type ChoiceGroupHost = import('../../form-core/types/choice-group/ChoiceGroupMixinTypes.js').ChoiceGroupHost;
export type LionOptionHost = import('../types/LionOption.js').LionOptionHost;
import { LitElement } from "lit";
export {};
//# sourceMappingURL=LionOption.d.ts.map