declare const LionInputAmount_base: typeof LionInput & import("@open-wc/dedupe-mixin").Constructor<import("../../localize/types/LocalizeMixinTypes.js").LocalizeMixinHost> & Pick<typeof import("../../localize/types/LocalizeMixinTypes.js").LocalizeMixinHost, "prototype" | "localizeNamespaces" | "waitForLocalizeNamespaces"> & Pick<typeof import("lit").LitElement, "prototype" | "_$litElement$" | "enabledWarnings" | "enableWarning" | "disableWarning" | "addInitializer" | "_initializers" | "elementProperties" | "properties" | "elementStyles" | "styles" | "observedAttributes" | "createProperty" | "getPropertyOptions" | "shadowRootOptions">;
/**
 * @typedef {import('../../form-core/types/FormatMixinTypes.js').FormatOptions} FormatOptions
 * @typedef {FormatOptions & {locale?:string;currency:string|undefined}} AmountFormatOptions
 */
/**
 * `LionInputAmount` is a class for an amount custom form element (`<lion-input-amount>`).
 *
 * @customElement lion-input-amount
 */
export class LionInputAmount extends LionInputAmount_base {
    /** @type {any} */
    static get properties(): any;
    static get styles(): (import("lit").CSSResultOrNative | import("lit").CSSResultArray)[];
    parser: typeof parseAmount;
    formatter: typeof formatAmount;
    /** @type {string | undefined} */
    currency: string | undefined;
    /** @type {string | undefined} */
    locale: string | undefined;
    __currencyDisplayNodeIsConnected: boolean;
    /** @protected */
    protected _currencyDisplayNodeSlot: string;
    connectedCallback(): void;
    /**
     * @param {Object} opts
     * @param {string?} opts.currency
     * @protected
     */
    protected _onCurrencyChanged({ currency }: {
        currency: string | null;
    }): void;
    /**
     * @returns {HTMLElement | undefined} the current currency display node
     * @private
     */
    private get __currencyDisplayNode();
    __storedCurrencyDisplayNode: HTMLElement | undefined;
    /** @private */
    private __setCurrencyDisplayLabel;
    get __currencyLabel(): string;
    __reformat(): void;
}
export type FormatOptions = import('../../form-core/types/FormatMixinTypes.js').FormatOptions;
export type AmountFormatOptions = FormatOptions & {
    locale?: string;
    currency: string | undefined;
};
import { LionInput } from "../../../exports/input.js";
import { parseAmount } from "./parsers.js";
import { formatAmount } from "./formatters.js";
export {};
//# sourceMappingURL=LionInputAmount.d.ts.map