/**
 * @typedef {import('./LionStep.js').LionStep} LionStep
 */
/**
 * `LionSteps` is a controller for a multi step system.
 *
 * @customElement lion-steps
 * @extends {LitElement}
 */
export class LionSteps extends LitElement {
    static get styles(): import("lit").CSSResult[];
    static get properties(): {
        /**
         * Storage for data gathered across different steps.
         * Data is passed into each step condition function as a first argument.
         */
        data: {
            type: ObjectConstructor;
        };
        /**
         * Number of the current entered step.
         */
        current: {
            type: NumberConstructor;
        };
    };
    /** @type {{[key: string]: ?}} */
    data: {
        [key: string]: any;
    };
    _internalCurrentSync: boolean;
    /** @type {number} */
    current: number;
    _max: number;
    render(): import("lit-html").TemplateResult<1>;
    next(): void;
    previous(): void;
    get steps(): import("./LionStep.js").LionStep[];
    /**
     * @param {number} newCurrent
     * @param {number} oldCurrent
     */
    _goTo(newCurrent: number, oldCurrent: number): void;
    /**
     * @param {number} newCurrent
     * @param {number} oldCurrent
     */
    _changeStep(newCurrent: number, oldCurrent: number): void;
    /**
     * @param {{number: number, element: LionStep}} fromStep
     * @param {{number: number, element: LionStep}} toStep
     */
    _dispatchTransitionEvent(fromStep: {
        number: number;
        element: LionStep;
    }, toStep: {
        number: number;
        element: LionStep;
    }): void;
    /**
     * @param {{current: number}} newValues
     * @param {{current: number}} oldValues
     */
    _onCurrentChanged(newValues: {
        current: number;
    }, oldValues: {
        current: number;
    }): void;
}
export type LionStep = import('./LionStep.js').LionStep;
import { LitElement } from "lit";
//# sourceMappingURL=LionSteps.d.ts.map