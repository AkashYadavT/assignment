declare const LionProgressIndicator_base: typeof LitElement & import("@open-wc/dedupe-mixin").Constructor<import("../../localize/types/LocalizeMixinTypes.js").LocalizeMixinHost> & Pick<typeof import("../../localize/types/LocalizeMixinTypes.js").LocalizeMixinHost, "prototype" | "localizeNamespaces" | "waitForLocalizeNamespaces"> & Pick<typeof LitElement, "prototype" | "_$litElement$" | "enabledWarnings" | "enableWarning" | "disableWarning" | "addInitializer" | "_initializers" | "elementProperties" | "properties" | "elementStyles" | "styles" | "observedAttributes" | "createProperty" | "getPropertyOptions" | "shadowRootOptions">;
/**
 * @typedef {import('lit').TemplateResult} TemplateResult
 */
export class LionProgressIndicator extends LionProgressIndicator_base {
    static get properties(): {
        value: {
            type: NumberConstructor;
        };
        min: {
            type: NumberConstructor;
        };
        max: {
            type: NumberConstructor;
        };
        _ariaLabel: {
            attribute: string;
            type: StringConstructor;
        };
        _ariaLabelledby: {
            attribute: string;
            type: StringConstructor;
        };
    };
    static get localizeNamespaces(): {
        'lion-progress-indicator': (locale: string) => Promise<typeof import("../translations/bg.js")>;
    }[];
    /**
     * @readonly
     * @type {boolean}
     */
    readonly get indeterminate(): boolean;
    /**
     * In case of a determinate progress-indicator it returns the progress percentage
     * based on value, min & max.
     * Could be used for styling inside the _graphicTemplate
     *
     * @example
     * style="width: ${this._progressPercentage}%"
     */
    get _progressPercentage(): number | undefined;
    value: number;
    min: number;
    max: number;
    _ariaLabel: string;
    _ariaLabelledby: string;
    __hasDefaultLabelSet: boolean;
    /** @protected */
    protected _graphicTemplate(): symbol;
    render(): symbol;
    connectedCallback(): void;
    _resetAriaValueAttributes(): void;
    _setDefaultLabel(): void;
}
export type TemplateResult = import('lit').TemplateResult;
import { LitElement } from "lit";
export {};
//# sourceMappingURL=LionProgressIndicator.d.ts.map