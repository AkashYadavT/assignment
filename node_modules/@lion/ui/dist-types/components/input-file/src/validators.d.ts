/**
 * @typedef {import('../../form-core/types/validate/validate.js').ValidatorConfig} ValidatorConfig
 * @typedef {import('../../form-core/types/validate/validate.js').ValidatorParam} ValidatorParam
 * @typedef {import('../../form-core/types/validate/validate.js').ValidatorOutcome} ValidatorOutcome
 * @typedef {import('../types/input-file.js').InputFile} InputFile
 */
export class IsAcceptedFile extends Validator {
    /**
     * @param {number} fileFileSize
     * @param {number} maxFileSize
     */
    static checkFileSize(fileFileSize: number, maxFileSize: number): boolean;
    /**
     * Gets the extension of a file name
     * @param {string} fileName like myFile.txt
     * @return {string} like .txt
     */
    static getExtension(fileName: string): string;
    /**
     * @param {string} extension
     * @param {string[]} allowedFileExtensions
     */
    static isExtensionAllowed(extension: string, allowedFileExtensions: string[]): string | undefined;
    /**
     * @param {string} type
     * @param {string[]} allowedFileTypes
     */
    static isFileTypeAllowed(type: string, allowedFileTypes: string[]): string | undefined;
    static getMessage(): Promise<string>;
    /**
     * @param {Array<File>} modelValue array of file objects
     * @param {{ allowedFileTypes: string[]; allowedFileExtensions: string[]; maxFileSize: number; }} params
     * @returns {Boolean}
     */
    execute(modelValue: Array<File>, params?: {
        allowedFileTypes: string[];
        allowedFileExtensions: string[];
        maxFileSize: number;
    }): boolean;
}
export class DuplicateFileNames extends Validator {
    /**
     * @returns {Promise<string|Element>}
     */
    static getMessage(): Promise<string | Element>;
    /**
     * @param {InputFile[]} modelValue
     * @param {ValidatorParam} [params]
     * @returns {ValidatorOutcome|Promise<ValidatorOutcome>}
     */
    execute(modelValue: InputFile[], params?: ValidatorParam): ValidatorOutcome | Promise<ValidatorOutcome>;
}
export type ValidatorConfig = import('../../form-core/types/validate/validate.js').ValidatorConfig;
export type ValidatorParam = import('../../form-core/types/validate/validate.js').ValidatorParam;
export type ValidatorOutcome = import('../../form-core/types/validate/validate.js').ValidatorOutcome;
export type InputFile = import('../types/input-file.js').InputFile;
import { Validator } from "../../../exports/form-core.js";
//# sourceMappingURL=validators.d.ts.map