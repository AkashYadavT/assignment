declare const LionSelectedFileList_base: typeof LitElement & import("@open-wc/dedupe-mixin").Constructor<import("@open-wc/scoped-elements/types.js").ScopedElementsHost> & import("@open-wc/dedupe-mixin").Constructor<import("../../localize/types/LocalizeMixinTypes.js").LocalizeMixinHost> & Pick<typeof import("../../localize/types/LocalizeMixinTypes.js").LocalizeMixinHost, "prototype" | "localizeNamespaces" | "waitForLocalizeNamespaces"> & Pick<typeof LitElement, "prototype" | "_$litElement$" | "enabledWarnings" | "enableWarning" | "disableWarning" | "addInitializer" | "_initializers" | "elementProperties" | "properties" | "elementStyles" | "styles" | "observedAttributes" | "createProperty" | "getPropertyOptions" | "shadowRootOptions">;
/**
 * @typedef {import('lit').TemplateResult} TemplateResult
 * @typedef {import('../types/input-file.js').InputFile} InputFile
 * @typedef {import('../types/input-file.js').SystemFile} SystemFile
 */
export class LionSelectedFileList extends LionSelectedFileList_base {
    static get scopedElements(): any;
    static get properties(): {
        fileList: {
            type: ArrayConstructor;
        };
        multiple: {
            type: BooleanConstructor;
        };
    };
    static localizeNamespaces: import("../../localize/types/LocalizeMixinTypes.js").NamespaceObject[];
    static get styles(): import("lit").CSSResult[];
    /**
     * @type {InputFile[]}
     */
    fileList: InputFile[];
    multiple: boolean;
    _enhanceLightDomA11y(): void;
    /**
     * @protected
     * @param {InputFile} removedFile
     */
    protected _removeFile(removedFile: InputFile): void;
    /**
     * @protected
     * @param {Array<import('../../form-core/types/validate/ValidateMixinTypes.js').FeedbackMessage>} validationFeedback
     * @param {string} fileUuid
     * @return {TemplateResult}
     */
    protected _validationFeedbackTemplate(validationFeedback: Array<import('../../form-core/types/validate/ValidateMixinTypes.js').FeedbackMessage>, fileUuid: string): TemplateResult;
    /**
     * @protected
     * @param {InputFile} file
     * @return {TemplateResult|nothing}
     */
    protected _listItemBeforeTemplate(file: InputFile): TemplateResult | typeof nothing;
    /**
     * @protected
     * @param {InputFile} file
     * @param {string} fileUuid
     * @return {TemplateResult}
     */
    protected _listItemAfterTemplate(file: InputFile, fileUuid: string): TemplateResult;
    /**
     * @protected
     * @return {TemplateResult}
     */
    protected _removeButtonContentTemplate(): TemplateResult;
    /**
     * @protected
     * @param {InputFile} file
     * @return {TemplateResult}
     */
    protected _selectedListItemTemplate(file: InputFile): TemplateResult;
    render(): import("lit-html").TemplateResult<1> | typeof nothing;
}
export type TemplateResult = import('lit').TemplateResult;
export type InputFile = import('../types/input-file.js').InputFile;
export type SystemFile = import('../types/input-file.js').SystemFile;
import { LitElement } from "lit";
import { nothing } from "lit-html";
export {};
//# sourceMappingURL=LionSelectedFileList.d.ts.map