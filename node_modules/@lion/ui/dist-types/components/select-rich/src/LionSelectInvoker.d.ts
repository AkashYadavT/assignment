declare const LionSelectInvoker_base: typeof LionButton & import("@open-wc/dedupe-mixin").Constructor<import("../../core/types/SlotMixinTypes.js").SlotHost> & Pick<typeof import("../../core/types/SlotMixinTypes.js").SlotHost, "prototype"> & Pick<typeof import("lit").LitElement, "prototype" | "_$litElement$" | "enabledWarnings" | "enableWarning" | "disableWarning" | "addInitializer" | "_initializers" | "elementProperties" | "properties" | "elementStyles" | "styles" | "observedAttributes" | "createProperty" | "getPropertyOptions" | "shadowRootOptions">;
/**
 * @typedef {import('lit').CSSResult} CSSResult
 * @typedef {import('lit').TemplateResult} TemplateResult
 * @typedef {import('../../listbox/src/LionOption.js').LionOption} LionOption
 * @typedef {import('../../select-rich/src/LionSelectRich.js').LionSelectRich} LionSelectRich
 */
/**
 * LionSelectInvoker: invoker button consuming a selected element
 */
export class LionSelectInvoker extends LionSelectInvoker_base {
    static get styles(): (import("lit").CSSResult & (import("lit").CSSResultOrNative | import("lit").CSSResultArray))[];
    /** @type {any} */
    static get properties(): any;
    get slots(): {
        after: () => HTMLSpanElement;
    };
    /**
     * @configure OverlayMixin
     */
    get _contentWrapperNode(): HTMLElement | null;
    /**
     * When the connected LionSelectRich instance is readOnly,
     * this should be reflected in the invoker as well
     */
    readOnly: boolean;
    /**
     * The option element that is currently selected
     * @type {LionOption | null}
     */
    selectedElement: LionOption | null;
    /**
     * The LionSelectRich element this invoker is part of. Will be set on connectedCallback of
     * LionSelectRich
     * @type {LionSelectRich | null}
     */
    hostElement: LionSelectRich | null;
    /**
     * When the connected LionSelectRich instance has only one option,
     * this should be reflected in the invoker as well
     */
    singleOption: boolean;
    /** @private */
    private __handleKeydown;
    connectedCallback(): void;
    /**
     * @protected
     * @returns {TemplateResult|Node[]|string|null}
     */
    protected _contentTemplate(): TemplateResult | Node[] | string | null;
    /**
     * To be overriden for a placeholder, used when `hasNoDefaultSelected` is true on the select rich
     * @protected
     * @returns {TemplateResult}
     */
    protected _noSelectionTemplate(): TemplateResult;
    /** @protected */
    protected _beforeTemplate(): import("lit-html").TemplateResult<1>;
    /** @protected */
    protected _afterTemplate(): import("lit-html").TemplateResult<1>;
}
export type CSSResult = import('lit').CSSResult;
export type TemplateResult = import('lit').TemplateResult;
export type LionOption = import('../../listbox/src/LionOption.js').LionOption;
export type LionSelectRich = import('../../select-rich/src/LionSelectRich.js').LionSelectRich;
import { LionButton } from "../../../exports/button.js";
export {};
//# sourceMappingURL=LionSelectInvoker.d.ts.map