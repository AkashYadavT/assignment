/**
 * @typedef {import('lit').RenderOptions} RenderOptions
 */
/**
 * `LionInputStepper` is a class for custom input-stepper element (`<lion-input-stepper>` web component).
 *
 * @customElement lion-input-stepper
 */
export class LionInputStepper extends LionInput {
    static get styles(): (import("lit").CSSResultOrNative | import("lit").CSSResultArray)[];
    /**
     * @returns {number}
     */
    get currentValue(): number;
    /** @param {string} modelValue */
    parser: (modelValue: string) => number;
    min: number;
    max: number;
    step: number;
    values: {
        max: number;
        min: number;
        step: number;
    };
    /**
     * Increment the value based on given step or default step value is 1
     * @private
     */
    private __increment;
    /**
     * Decrement the value based on given step or default step value is 1
     * @private
     */
    private __decrement;
    __boundOnLeaveButton: () => void;
    role: string | undefined;
    get slots(): {
        prefix: () => Element | null;
        suffix: () => Element | null;
        input: () => HTMLInputElement;
    };
    /**
     * Set aria labels and apply validators
     * @private
     */
    private __setAriaLabelsAndValidator;
    /**
     * Update values on keyboard arrow up and down event
     * @param {KeyboardEvent} e - keyboard event
     * @private
     */
    private __keyDownHandler;
    /**
     * Toggle disabled state for the buttons
     * @private
     */
    private __toggleSpinnerButtonsState;
    /**
     * Get slotted element
     * @param {String} slotName - slot name
     * @returns {HTMLButtonElement|Object}
     * @private
     */
    private __getSlot;
    /**
     * Get the increment button node
     * @returns {Element|null}
     * @private
     */
    private __getIncrementButtonNode;
    /**
     * Get the decrement button node
     * @returns {Element|null}
     * @private
     */
    private __getDecrementButtonNode;
    /**
     * Toggle +/- buttons on change
     * @override
     * @protected
     */
    protected override _onChange(): void;
    /**
     * Get the decrementor button sign template
     * @returns {String|import('lit').TemplateResult}
     * @protected
     */
    protected _decrementorSignTemplate(): string | import('lit').TemplateResult;
    /**
     * Get the incrementor button sign template
     * @returns {String|import('lit').TemplateResult}
     * @protected
     */
    protected _incrementorSignTemplate(): string | import('lit').TemplateResult;
    /**
     * Get the increment button template
     * @returns {import('lit').TemplateResult}
     * @protected
     */
    protected _decrementorTemplate(): import('lit').TemplateResult;
    /**
     * Get the decrement button template
     * @returns {import('lit').TemplateResult}
     * @protected
     */
    protected _incrementorTemplate(): import('lit').TemplateResult;
    /**
     * Redispatch leave event on host when catching leave event
     * on the incrementor and decrementor button.
     *
     * This redispatched leave event will be caught by
     * InteractionStateMixin to set "touched" state to true.
     *
     * Interacting with the buttons is "user interactions"
     * the same way as focusing + blurring the field (native input)
     */
    _onLeaveButton(): void;
}
export type RenderOptions = import('lit').RenderOptions;
import { LionInput } from "../../../exports/input.js";
//# sourceMappingURL=LionInputStepper.d.ts.map