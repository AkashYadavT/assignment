/**
 * Formats a number based on locale and options. It uses Intl for the formatting.
 *
 * @typedef {import('../../types/LocalizeMixinTypes.js').FormatNumberPart} FormatNumberPart
 * @typedef {import('../../types/LocalizeMixinTypes.js').FormatNumberOptions} FormatOptions
 * @param {number} number Number to be formatted
 * @param {FormatOptions} [options] Intl options are available extended by roundMode and returnIfNaN
 * @returns {string}
 */
export function formatNumber(number: number, options?: import("../../types/LocalizeMixinTypes.js").FormatNumberOptions | undefined): string;
/**
 * Formats a number based on locale and options. It uses Intl for the formatting.
 */
export type FormatNumberPart = import('../../types/LocalizeMixinTypes.js').FormatNumberPart;
/**
 * Formats a number based on locale and options. It uses Intl for the formatting.
 */
export type FormatOptions = import('../../types/LocalizeMixinTypes.js').FormatNumberOptions;
export type NumberPostProcessor = import('../../types/LocalizeMixinTypes.js').NumberPostProcessor;
//# sourceMappingURL=formatNumber.d.ts.map