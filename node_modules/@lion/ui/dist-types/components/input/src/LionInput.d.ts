declare const LionInput_base: typeof LionField & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/NativeTextFieldMixinTypes.js").NativeTextFieldHost> & Pick<typeof import("../../form-core/types/NativeTextFieldMixinTypes.js").NativeTextFieldHost, "prototype"> & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/FormatMixinTypes.js").FormatHost> & Pick<typeof import("../../form-core/types/FormatMixinTypes.js").FormatHost, "prototype"> & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/FocusMixinTypes.js").FocusHost> & Pick<typeof import("../../form-core/types/FocusMixinTypes.js").FocusHost, "prototype"> & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/FormControlMixinTypes.js").FormControlHost> & Pick<typeof import("../../form-core/types/FormControlMixinTypes.js").FormControlHost, "prototype" | "properties" | "styles">;
/**
 * LionInput: extension of lion-field with native input element in place and user friendly API.
 *
 * @customElement lion-input
 */
export class LionInput extends LionInput_base {
    /** @type {any} */
    static get properties(): any;
    get slots(): {
        input: () => HTMLInputElement;
    };
    /**
     * @type {HTMLInputElement}
     * @protected
     */
    protected get _inputNode(): HTMLInputElement;
    type: string;
    placeholder: string;
    /**
     * @param {string} [name]
     * @param {unknown} [oldValue]
     * @param {import('lit').PropertyDeclaration} [options]
     * @returns {void}
     */
    requestUpdate(name?: string | undefined, oldValue?: unknown, options?: import("lit").PropertyDeclaration<any, any> | undefined): void;
    /** @param {import('lit').PropertyValues } changedProperties */
    updated(changedProperties: import('lit').PropertyValues): void;
    /** @private */
    private __delegateReadOnly;
}
import { LionField } from "../../../exports/form-core.js";
export {};
//# sourceMappingURL=LionInput.d.ts.map