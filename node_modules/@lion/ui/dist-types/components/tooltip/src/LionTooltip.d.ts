declare const LionTooltip_base: typeof LitElement & import("@open-wc/dedupe-mixin").Constructor<import("@lion/ui/types/overlays.js").OverlayHost> & Pick<typeof import("@lion/ui/types/overlays.js").OverlayHost, "prototype"> & Pick<typeof LitElement, "prototype" | "_$litElement$" | "enabledWarnings" | "enableWarning" | "disableWarning" | "addInitializer" | "_initializers" | "elementProperties" | "properties" | "elementStyles" | "styles" | "observedAttributes" | "createProperty" | "getPropertyOptions" | "shadowRootOptions"> & import("@open-wc/dedupe-mixin").Constructor<import("@lion/ui/types/overlays.js").ArrowHost> & Pick<typeof import("@lion/ui/types/overlays.js").ArrowHost, "prototype" | "properties" | "styles">;
/**
 * @typedef {import('@lion/ui/types/overlays.js').OverlayConfig} OverlayConfig
 * @typedef {import('lit').CSSResult} CSSResult
 * @typedef {import('lit').CSSResultArray} CSSResultArray
 */
/**
 * @customElement lion-tooltip
 */
export class LionTooltip extends LionTooltip_base {
    /** @type {any} */
    static get properties(): any;
    static get styles(): (import("lit").CSSResultOrNative | import("lit").CSSResultArray)[];
    /**
     * Decides whether the tooltip invoker text should be considered a description
     * (sets aria-describedby) or a label (sets aria-labelledby).
     * @type {'label'|'description'}
     */
    invokerRelation: 'label' | 'description';
    /** @protected */
    protected _defineOverlayConfig(): import("@lion/ui/types/overlays.js").OverlayConfig;
}
export type OverlayConfig = import('@lion/ui/types/overlays.js').OverlayConfig;
export type CSSResult = import('lit').CSSResult;
export type CSSResultArray = import('lit').CSSResultArray;
import { LitElement } from "lit";
export {};
//# sourceMappingURL=LionTooltip.d.ts.map