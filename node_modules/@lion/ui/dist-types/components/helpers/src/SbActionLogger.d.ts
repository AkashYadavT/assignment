/** @typedef {import('lit').TemplateResult} TemplateResult */
export class SbActionLogger extends LitElement {
    static get properties(): {
        title: {
            type: StringConstructor;
            reflect: boolean;
        };
        simple: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        __logCounter: {
            type: NumberConstructor;
        };
    };
    static get styles(): import("lit").CSSResult[];
    simple: boolean;
    __logCounter: number;
    get loggerEl(): HTMLElement;
    /**
     * Renders the passed content as a node, and appends it to the logger
     * Only supports simple values, will be interpreted to a String
     * E.g. an Object will become '[object Object]'
     *
     * @param {string} content Content to be logged to the action logger
     */
    log(content: string): void;
    /**
     * Protected getter that returns the template of a single log
     *
     * @param {string} content
     * @return {TemplateResult} TemplateResult that uses the content passed to create a log
     */
    _logTemplate(content: string): TemplateResult;
    render(): import("lit-html").TemplateResult<1>;
    /**
     * @param {string} content
     */
    __appendLog(content: string): void;
    /**
     * @param {string} content
     */
    __isConsecutiveDuplicateLog(content: string): boolean;
    __handleConsecutiveDuplicateLog(): void;
    __prependLogCounterElement(): void;
    __animateCue(): void;
    __clearLogs(): void;
}
export type TemplateResult = import('lit').TemplateResult;
import { LitElement } from "lit";
//# sourceMappingURL=SbActionLogger.d.ts.map