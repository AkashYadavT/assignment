declare const LionRadio_base: typeof LionInput & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/choice-group/ChoiceInputMixinTypes.js").ChoiceInputHost> & Pick<typeof import("../../form-core/types/choice-group/ChoiceInputMixinTypes.js").ChoiceInputHost, "prototype" | "styles"> & import("@open-wc/dedupe-mixin").Constructor<import("../../form-core/types/FormatMixinTypes.js").FormatHost> & Pick<typeof import("../../form-core/types/FormatMixinTypes.js").FormatHost, "prototype"> & Pick<typeof import("lit").LitElement, "prototype" | "_$litElement$" | "enabledWarnings" | "enableWarning" | "disableWarning" | "addInitializer" | "_initializers" | "elementProperties" | "properties" | "elementStyles" | "styles" | "observedAttributes" | "createProperty" | "getPropertyOptions" | "shadowRootOptions">;
/**
 * Lion-radio can be used inside a lion-radio-group.
 *
 * <lion-radio-group name="radios">
 *   <label slot="label">My Radio</label>
 *   <lion-radio>
 *     <label slot="label">Male</label>
 *   </lion-radio>
 *   <lion-radio>
 *     <label slot="label">Female</label>
 *   </lion-radio>
 * </lion-radio-group>
 *
 * You can preselect an option by setting marking an lion-radio checked.
 *   Example:
 *   <lion-radio checked>
 *
 * @customElement lion-radio
 */
export class LionRadio extends LionRadio_base {
}
import { LionInput } from "../../../exports/input.js";
export {};
//# sourceMappingURL=LionRadio.d.ts.map